Starting audit...
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16:12: More than 7 parameters (found 8). [ParameterNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16:40: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16:58: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16:76: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:16:93: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:17: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:17:52: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:17:79: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:28:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:32:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getmRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getmRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:36:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getNrpers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getNrpers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:40:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getLength' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getLength' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:44:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getWidth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getWidth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:48:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:52:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getTypeground' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getTypeground' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/GameInput.java:56:5: Class 'GameInput' looks like designed for extension (can be subclassed), but the method 'getRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInput' final or making the method 'getRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:0: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:2:8: Unused import - fileio.FileSystem. [UnusedImports]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:5: Using the '.*' form of import should be avoided - players.*. [AvoidStarImport]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:7:8: Unused import - java.io.FileOutputStream. [UnusedImports]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:13:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:15:29: Parameter args should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:27: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:31: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:35: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/main/Main.java:39: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:10:16: Parameter n should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:10:23: Parameter m should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:10:30: Parameter typeground should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:16:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'Createmap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'Createmap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:16:21: Name 'Createmap' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MethodName]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:28:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getN' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getN' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:32:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getM' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getM' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/map/Map.java:37:5: Class 'Map' looks like designed for extension (can be subclassed), but the method 'getTypeground' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Map' final or making the method 'getTypeground' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:4:19: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:4:29: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:5:20: '900' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:8:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'levelup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'levelup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:11:21: '900' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Knight.java:11:27: '80' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:19: Parameter type should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:32: Parameter hp should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:40: Parameter xp should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:48: Parameter level should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:59: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:12:69: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:21:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:23:26: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:24:40: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:25:30: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:26:30: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:27:36: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:28:34: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:29:34: '+' should be on a new line. [OperatorWrap]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:33:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'levelup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'levelup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:34:19: '250' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:34:31: '300' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:37:19: '300' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:37:31: '350' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:40:19: '350' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:40:31: '400' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:41:22: '3' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:43:19: '400' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:44:22: '4' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:48:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:52:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:52:25: Parameter type should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:56:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:60:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setHp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setHp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:60:23: Parameter hp should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:64:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:68:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setXp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setXp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:68:23: Parameter xp should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:73:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:77:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:77:26: Parameter level should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:81:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getPozi' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getPozi' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:85:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setPozi' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setPozi' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:85:25: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:89:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'getPozj' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'getPozj' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:93:5: Class 'Player' looks like designed for extension (can be subclassed), but the method 'setPozj' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Player' final or making the method 'setPozj' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Player.java:93:25: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:4:23: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:4:33: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:5:20: '500' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:8:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'levelup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'levelup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:11:21: '500' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Pyromancer.java:11:27: '50' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:4:18: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:4:28: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:5:20: '600' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:8:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'levelup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'levelup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:11:21: '600' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Rogue.java:11:27: '40' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:4:19: Parameter pozi should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:4:29: Parameter pozj should be final. [FinalParameters]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:5:20: '400' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:8:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'levelup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'levelup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:11:21: '400' is a magic number. [MagicNumber]
[ERROR] /mnt/c/Users/Alex/Desktop/Facultate/poo/git/Proiect1/etapa1/src/players/Wizard.java:11:27: '30' is a magic number. [MagicNumber]
Audit done.
Checkstyle ends with 101 errors.
